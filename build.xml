<?xml version="1.0" encoding="UTF-8" ?>
<project name="FreezeDry" default="make_release" basedir=".">

	<!-- =====================================================================
							   S E T T I N G S
	     ===================================================================== -->
	<!-- 
		version information 
	-->
	<property name="version" value="0.2.0" />

	<!-- 
		set global properties for this build
	 -->
	<property name="src" location="src" />
	<property name="build" location="bin" />
	<property name="dist" location="dist" />
	<property name="release" location="FreezeDry_v${version}" />
	<property name="libs" value="lib" />
	<property name="docs" value="docs" />

	<property name="app_name" value="FreezeDry" />

	<!-- =====================================================================
						   D E P E N D E N C I E S
	     ===================================================================== -->
	<!-- 
		jUnit
	-->
	<property name="junit" value="junit-4.8.1.jar" />
	
	<!--
		log4j
	-->
	<property name="log4j" value="log4j-1.2.15.jar" />
	<property name="log4j_config" value="log4j.xml" />
	
	<!-- 
		JSON
	-->
	<property name="json" value="json-20120228.jar" />
		

	<!-- =====================================================================
					  B U I L D   C O N F I G U R A T I O N
	     ===================================================================== -->
	<!--
		java libs directory for building one giant jar file containing all 
		the dependencies
	-->
	<property environment="env"/>
	<property name="java-libs" value="${env.JAVA_LIBS}" />
	<property name="json-libs" value="json"/>
	<property name="internal_class_path" value="${junit} 
												${log4j} 
												${json}" />


	<!-- 
		jar dependencies when building a jar that looks in a lib directory for
		the dependencies at runtime 
	-->
	<property name="class_path" value="${junit} 
										${log4j} 
										${json}" />

	<!-- =====================================================================
								T A R G E T S
	     ===================================================================== -->

	<!-- 
		Target: init
		
		Sets up the directories for building the jars
	-->
	<target name="init" description="sets up directories for building">
		<mkdir dir="${src}" />
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
	</target>

	<!-- 
		Target: copy_dependencies
	-->
	<target name="copy_dependencies" depends="init" description="copies the dependencies into lib">
		<mkdir dir="${dist}/lib" />
		<copy file="${java-libs}/${junit}" todir="${dist}/lib" />
		<copy file="${java-libs}/${log4j}" todir="${dist}/lib" />
		<copy file="${java-libs}/${json-libs}/${json}" todir="${dist}/lib" />
	</target>

	<!--
		Target: clean_dist
		
		removes the distribution directory and all its contents
	-->
	<target name="clean_dist" description="removes the dist directory">
		<delete dir="${dist}" failonerror="false"/>
	</target>

	<!--
		Target: configure_logging
		
		copies the log4j logging configuration files into the distribution directory
	-->
	<target name="configure_logging" description="copies to log4j.properties file to the dist directory">
		<copy file="log4j.xml" todir="${dist}" failonerror="false" />
	</target>


	<!-- 
		Target: make_jar
		
		builds a jar that contains only the FreezeDry classes 
	-->
	<property name="jars" value="jars" />
	<property name="jar_file" value="${app_name}_${version}.jar" />
	<target name="make_jar" depends="clean_dist, init, configure_logging" description="build the jar file containing only FreezeDry classes">
		<echo>***** Building single jar file for ${app_name} *****</echo>
		<echo>Base Directory: ${basedir}</echo>
		<echo>Directory containing classes: ${build}</echo>
		<echo>Directory to contain jar: ${dist}/${jars}</echo>
		<echo>Directory contianing external libraries: ${env.JAVA_LIBS}</echo>

		<jar destfile="${dist}/${jars}/${jar_file}">
			<fileset dir="${build}" includes="**/*.class" />
			<fileset dir="${build}" includes="${log4j_config}" />			

			<manifest>
				<attribute name="Ant" value="${user.name}" />
				<!-- Information about the program itself -->
				<attribute name="Implementation-Vendor" value="Rob Philipp" />
				<attribute name="Implementation-Title" value="${app_name}" />
				<attribute name="Implementation-Version" value="${version}" />
				<!-- Runtime information -->
				<attribute name="Main-Class" value="org/freezedry/persistence/PersistenceEngine" />
				<attribute name="Class-Path" value="${internal_class_path}" />
			</manifest>
		</jar>

	</target>

	<!-- 
		Target: make_combined_jar
		
		builds a single jar that contains all the dependent jar files 
	-->
	<property name="single_jar" value="single_jar" />
	<target name="make_combined_jar" depends="clean_dist, init, configure_logging" description="build a jar file that contains all the dependent code">
		<echo>***** Building single jar file for ${app_name} *****</echo>
		<echo>Base Directory: ${basedir}</echo>
		<echo>Directory containing classes: ${build}</echo>
		<echo>Directory to contain jar: ${dist}/${single_jar}</echo>
		<echo>Directory contianing external libraries: ${env.JAVA_LIBS}</echo>

		<jar destfile="${dist}/${single_jar}/${jar_file}">
			<fileset dir="${build}" includes="**/*.class" />
			<fileset dir="${build}" includes="${log4j_config}" />			
			<zipfileset src="${java-libs}/${log4j}" excludes="META-INF/*" />
			<zipfileset src="${java-libs}/${junit}" excludes="META-INF/*" />
			<zipfileset src="${java-libs}/${json-libs}/${json}" excludes="META-INF/*" />

			<manifest>
				<attribute name="Ant" value="${user.name}" />
				<!-- Information about the program itself -->
				<attribute name="Implementation-Vendor" value="Rob Philipp" />
				<attribute name="Implementation-Title" value="${app_name}" />
				<attribute name="Implementation-Version" value="${version}" />
				<!-- Runtime information -->
				<attribute name="Main-Class" value="org/freezedry/persistence/PersistenceEngine" />
				<attribute name="Class-Path" value="${internal_class_path}" />
			</manifest>
		</jar>
	</target>
	
	<!-- 
		Target: make_release
		
		creates the directory with the release code and zip files. calls the dependencies for make the freeze dry jars 
	-->
	<property name="release" location="${dist}/${app_name}_v${version}" />
	<target name="make_release" depends="make_jar, make_combined_jar" description="builds the single and freeze-dry jars and creates the release structure">
		
		<property name="rel_src" value="src" />
	
		<!-- remove the release directory (FreezeDry_vX.X.X) if it already exists -->
		<delete dir="${release}" failonerror="false"/>
		
		<!-- create the release directory and its subdirectorys: src, single_jar, jars -->
		<mkdir dir="${release}" />
		<mkdir dir="${release}/${single_jar}" />
		<mkdir dir="${release}/${jars}" />
		<mkdir dir="${release}/${rel_src}" />
		
		<!-- copy the log4j configuration files into the appropriate directories -->
		<copy file="log4j.xml" todir="${release}/${single_jar}" />
		<copy file="log4j.xml" todir="${release}/${jars}" />
		<copy file="log4j.xml" todir="${release}/${rel_src}" />
		
		<!-- copy the this build file to the release src directory -->
		<copy file="build.xml" todir="${release}/${rel_src}" />
		
		<!-- copy the single jar to the single jar release directory -->
		<copy file="${dist}/${single_jar}/${jar_file}" todir="${release}/${single_jar}" />
		<zip destfile="${release}/${single_jar}/${app_name}_${version}.zip" basedir="${release}/${single_jar}" includes="*.*" />
		
		<!-- copy the multiple jars to the jars release directory -->
		<copy file="${dist}/${jars}/${jar_file}" todir="${release}/${jars}" />
		<copy file="${java-libs}/${junit}" todir="${release}/${jars}" />
		<copy file="${java-libs}/${log4j}" todir="${release}/${jars}" />
		<copy file="${java-libs}/${json-libs}/${json}" todir="${release}/${jars}" />
		<zip destfile="${release}/${jars}/${app_name}_${version}.zip" basedir="${release}/${jars}" includes="*.*" />
		
		<!-- copy the soure files into the release source directory, and zip everything up -->
		<copy todir="${release}/${rel_src}"><fileset dir="${src}" includes="**/*.java" /></copy>
		<zip destfile="${release}/${rel_src}/${app_name}_src_${version}.zip" basedir="${release}/${rel_src}" includes="**/*.java, **/*.xml" />
		
	</target>
</project>
